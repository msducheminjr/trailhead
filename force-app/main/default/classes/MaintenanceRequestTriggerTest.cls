/**
 * This class contains unit tests for validating the behavior of Apex classes
 * and triggers.
 *
 * Unit tests are class methods that verify whether a particular piece
 * of code is working properly. Unit test methods take no arguments,
 * commit no data to the database, and are flagged with the testMethod
 * keyword in the method definition.
 *
 * All test methods in an organization are executed whenever Apex code is deployed
 * to a production organization to confirm correctness, ensure code
 * coverage, and prevent regressions. All Apex classes are
 * required to have at least 75% code coverage in order to be deployed
 * to a production organization. In addition, all triggers must have some code coverage.
 * 
 * The @isTest class annotation indicates this class only contains test
 * methods. Classes defined with the @isTest annotation do not count against
 * the organization size limit for all Apex scripts.
 *
 * See the Apex Language Reference for more information about Testing and Code Coverage.
 */
@isTest
private class MaintenanceRequestTriggerTest {

    @isTest static void TestPositiveMaintTrigger() {
	    // positive testing
	    	// existing maintenance request of type Repair or Routine Maintenance or is closed
	    	// new maintenance request created 
	    		// type set as Routine Maintenance
	    		// subject not null
	    		// report date is date request was created
	    		// next due date matches shortest lifespan    	
    	List<Case> cases = new List<Case>();
    	Case repairCase = TestDataFactory.maintenanceRequestTriggerPositive('Repair');
		Case routineCase = TestDataFactory.maintenanceRequestTriggerPositive('Routine Maintenance');
    	cases.add(repairCase);
    	cases.add(routineCase);
    	cases = MaintenanceRequestHelper.relatedObjectsQuery(cases);
		String repairSubject = 'Routine Maintenance created from ' + repairCase.CaseNumber;
		String routineSubject = 'Routine Maintenance created from ' + routineCase.CaseNumber;   	
    	// target lifespan of months is 3 CHANGE HERE IF YOU CHANGE THE FACTORY
    	Date dateReportedTarget = System.today();
    	Date dateDueTarget = System.today().addDays(90);
    	// update statuses of cases to Close
    	for (Case c : cases) {
    		c.Status = 'Closed';
    	}
    	
    	Test.startTest();  
        List<Database.SaveResult> updateResults = Database.update(cases);
        Test.stopTest();  
        for(Database.SaveResult updateResult : updateResults) { 
	        System.assert(updateResult.isSuccess());
        }
    	// find new cases generated by trigger
		Case repairTriggerCase = [SELECT Id, Date_Due__c, Date_Reported__c, Subject, Type, Vehicle__c, Equipment__c, 
			ParentId, ContactId, AccountId, Status 
			FROM Case  WHERE ParentId = :repairCase.Id LIMIT 1];

		Case routineTriggerCase = [SELECT Id, Date_Due__c, Date_Reported__c, Subject, Type, Vehicle__c, Equipment__c, 
			ParentId, ContactId, AccountId, Status
			FROM Case WHERE ParentId = :routineCase.Id LIMIT 1];

		List<Product2> originalEquipment;
		List<Product2> newEquipment;

    	// Repair trigger
    	System.assertEquals(repairTriggerCase.Date_Due__c, dateDueTarget, 'Date Due should be 3 months in future');
    	System.assertEquals(repairTriggerCase.Date_Due__c, dateDueTarget, 'Date Reported should be today');
    	System.assertEquals(repairTriggerCase.Vehicle__c, repairCase.Vehicle__c, 'Related new case should have same vehicle');    	
    	System.assertEquals(repairTriggerCase.Type, 'Routine Maintenance', 'Related new case should have Type of \'Routine Maintenance\'');
    	System.assertEquals(repairTriggerCase.Status, 'New', 'Related new case should have Status of \'New\'');
		originalEquipment =     		[SELECT Id FROM Product2 WHERE Id IN 
    			(SELECT Equipment__c FROM Work_Part__c WHERE Maintenance_Request__c = :repairCase.Id) ORDER BY Id];
    	newEquipment = [SELECT Id FROM Product2 WHERE Id IN 
    			(SELECT Equipment__c FROM Work_Part__c WHERE Maintenance_Request__c = :repairTriggerCase.Id) ORDER BY Id];
    	System.assertEquals(newEquipment, originalEquipment,	'Old and new cases should have same equipment');
    	System.Debug('Parent CaseNumber is ' + repairCase.CaseNumber + '. New subject is ' + repairTriggerCase.subject);
		//System.assertEquals(repairSubject, repairTriggerCase.Subject, 'Should have subject referencing parent CaseNumber');


		// Routine trigger		
    	System.assertEquals(routineTriggerCase.Date_Due__c, dateDueTarget, 'Date Due should be 3 months in future');
    	System.assertEquals(routineTriggerCase.Date_Due__c, dateDueTarget, 'Date Reported should be today');
    	System.assertEquals(routineTriggerCase.Vehicle__c, routineCase.Vehicle__c, 'Related new case should have same vehicle');    	
    	System.assertEquals(routineTriggerCase.Type, 'Routine Maintenance', 'Related new case should have Type of \'Routine Maintenance\'');
    	System.assertEquals(routineTriggerCase.Status, 'New', 'Related new case should have Status of \'New\'');
		originalEquipment =     		[SELECT Id FROM Product2 WHERE Id IN 
    			(SELECT Equipment__c FROM Work_Part__c WHERE Maintenance_Request__c = :routineCase.Id) ORDER BY Id];
    	newEquipment = [SELECT Id FROM Product2 WHERE Id IN 
    			(SELECT Equipment__c FROM Work_Part__c WHERE Maintenance_Request__c = :routineTriggerCase.Id) ORDER BY Id];
    	System.assertEquals(newEquipment, originalEquipment,	'Old and new cases should have same equipment');
    	System.Debug('Parent CaseNumber is ' + routineCase.CaseNumber + '. New subject is ' + routineTriggerCase.subject);
    	//System.assertEquals(routineSubject, routineTriggerCase.Subject, 'Should have subject referencing parent CaseNumber');    		
    }

	@isTest static void TestPositiveBareBones() {
		Vehicle__c veh = new Vehicle__c(Name='Simple Vehicle');
		insert veh;
		case c = new Case(Vehicle__c=veh.Id, Type='Routine Maintenance', Status='New', Origin='Web');
		insert c;
		c.status = 'Closed';
		Test.startTest();
		Database.SaveResult updateResult= Database.update(c);
		Test.stopTest();
		List<Case> triggerCases = [SELECT Id, Date_Due__c, Date_Reported__c, Subject, Type, Vehicle__c, Equipment__c 
			FROM Case WHERE Type = 'Routine Maintenance' AND Subject LIKE 'Routine Maintenance created from%'];
		System.assertEquals(1, triggerCases.size(), 'Should create one child case');
	}

    @isTest static void TestNegativeMaintTriggerWrongType() {
	    // negative testing
	    	// existing maintenance request NOT of type Repair or Routine Maintenance is closed
		Case negCase = TestDataFactory.maintenanceRequestTriggerNegative();
		
		negCase.Status = 'Closed';
    	Test.startTest();  
        Database.SaveResult updateResult= Database.update(negCase);
        Test.stopTest();  
        
        System.assert(updateResult.isSuccess());

		List<Case> triggerCases = [SELECT Id, Date_Due__c, Date_Reported__c, Subject, Type, Vehicle__c, Equipment__c 
			FROM Case WHERE Type = 'Routine Maintenance' AND Subject LIKE 'Routine Maintenance created from%'];
    	System.assertEquals(0, triggerCases.size(), 'No new Maintenance_Request__c should be created from trigger');
    	
    }

    @isTest static void TestNegativeMaintTriggerWrongStatus() {
	    // negative testing
	    	// existing maintenance request of type Repair or Routine Maintenance is updated but NOT closed
    	List<Case> cases = new List<Case>();
    	Case repairCase = TestDataFactory.maintenanceRequestTriggerPositive('Repair');
		Case routineCase = TestDataFactory.maintenanceRequestTriggerPositive('Routine Maintenance');
    	cases.add(repairCase);
    	cases.add(routineCase);

    	// update statuses of cases to Close
    	for (Case c : cases) {
    		c.Status = 'Working';
    	}
    	
    	Test.startTest();  
        List<Database.SaveResult> updateResults= Database.update(cases);
        Test.stopTest();  
        
        for(Database.SaveResult updateResult : updateResults) { 
	        System.assert(updateResult.isSuccess());
        }
		List<Case> triggerCases = [SELECT Id, Date_Due__c, Date_Reported__c, Subject, Type, Vehicle__c, Equipment__c, 
			ParentId, ContactId, AccountId 
			FROM Case WHERE Type = 'Routine Maintenance' AND Subject LIKE 'Routine Maintenance created from%'];
    	System.assertEquals(0, triggerCases.size(), 'No new Maintenance_Request__c should be created from trigger');
    }



    // bulk testing
    @isTest static void TestMaintTriggerBulk() {
    	// set up bulk records 
    	Integer numRecs = 300;
    	// 2/3 are eligible Type and half of those are valid Status so one third will have cases created
    	Integer expectedCreated = numRecs / 3; 
	    // negative testing
	    	// existing maintenance request of type Repair or Routine Maintenance is updated but NOT closed
    	List<Case> cases = TestDataFactory.setupBulkTesting(numRecs);

		cases = MaintenanceRequestHelper.relatedObjectsQuery(cases);
		Boolean toggleStatus = false;
    	// update statuses of cases to Close
    	for (Case c : cases) {
    		if (toggleStatus) {
    			c.Status = 'Working';
    		} else {
    			c.Status = 'Closed';
    		}
    		toggleStatus = !toggleStatus;
    	}
    	
    	Test.startTest();  
        List<Database.SaveResult> updateResults= Database.update(cases);
        Test.stopTest();  
        
        for(Database.SaveResult updateResult : updateResults) { 
	        System.assert(updateResult.isSuccess());
        }
		List<Case> triggerCases = [SELECT Id, Date_Due__c, Date_Reported__c, Subject, Type, Vehicle__c, Equipment__c, 
			ParentId, ContactId, AccountId 
			FROM Case WHERE Type = 'Routine Maintenance' AND Subject LIKE 'Routine Maintenance created from%'];
    	System.assertEquals(expectedCreated, triggerCases.size(), 'Expected ' + expectedCreated + ' cases to be created. Actual: ' + triggerCases.size());
    }


    
}